const Bill = require('../models/Bill');
const Appointment = require('../models/Appointment');
const User = require('../models/User');

/**
 * Create a new bill for a completed appointment
 * Doctor only - amounts are received in paise from frontend
 */
exports.createBill = async (req, res) => {
  try {
    const { appointmentId, items, notes } = req.body;
    const doctorId = req.user.id;

    // Validate appointment
    const appointment = await Appointment.findById(appointmentId);
    if (!appointment) {
      return res.status(404).json({ success: false, message: 'Appointment not found' });
    }

    if (appointment.doctorId.toString() !== doctorId) {
      return res.status(403).json({ success: false, message: 'Unauthorized access' });
    }

    if (appointment.status !== 'Completed') {
      return res.status(400).json({ 
        success: false, 
        message: 'Can only create bills for completed appointments' 
      });
    }

    // Check if bill already exists for this appointment
    const existingBill = await Bill.findOne({ appointmentId });
    if (existingBill) {
      return res.status(400).json({ 
        success: false, 
        message: 'Bill already exists for this appointment' 
      });
    }

    // Validate items
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: 'At least one bill item is required' 
      });
    }

    // Calculate total amount (all amounts are already in paise from frontend)
    let totalAmount = 0;
    const validatedItems = items.map(item => {
      if (!item.description || !item.amount || item.amount < 0) {
        throw new Error('Invalid item data');
      }
      const quantity = item.quantity || 1;
      const itemTotal = Math.round(item.amount * quantity);
      totalAmount += itemTotal;
      
      return {
        description: item.description,
        quantity: quantity,
        amount: Math.round(item.amount), // Ensure integer
      };
    });

    // Create bill
    const bill = new Bill({
      appointmentId,
      patientId: appointment.patientId,
      doctorId,
      items: validatedItems,
      totalAmount: Math.round(totalAmount), // Ensure integer
      notes: notes || '',
      status: 'unpaid',
    });

    await bill.save();

    // Populate for response
    await bill.populate('patientId', 'name email');
    await bill.populate('doctorId', 'name');
    await bill.populate('appointmentId', 'date timeSlot');

    // Send notification to patient
    if (global.sendNotification) {
      global.sendNotification(appointment.patientId.toString(), {
        type: 'new_bill',
        message: `New bill generated by Dr. ${req.user.name}`,
        billId: bill._id,
      });
    }

    res.status(201).json({ 
      success: true, 
      message: 'Bill created successfully',
      bill 
    });
  } catch (error) {
    console.error('Error creating bill:', error);
    res.status(500).json({ 
      success: false, 
      message: error.message || 'Failed to create bill' 
    });
  }
};

/**
 * Get all bills for a patient
 */
exports.getPatientBills = async (req, res) => {
  try {
    const patientId = req.user.id;
    const { status } = req.query;

    const query = { patientId };
    if (status) {
      query.status = status;
    }

    const bills = await Bill.find(query)
      .populate('doctorId', 'name specialization')
      .populate('appointmentId', 'date timeSlot')
      .sort({ createdAt: -1 });

    res.json({ success: true, bills });
  } catch (error) {
    console.error('Error fetching patient bills:', error);
    res.status(500).json({ success: false, message: 'Failed to fetch bills' });
  }
};

/**
 * Get all bills created by a doctor
 */
exports.getDoctorBills = async (req, res) => {
  try {
    const doctorId = req.user.id;
    const { status } = req.query;

    const query = { doctorId };
    if (status) {
      query.status = status;
    }

    const bills = await Bill.find(query)
      .populate('patientId', 'name email')
      .populate('appointmentId', 'date timeSlot')
      .sort({ createdAt: -1 });

    res.json({ success: true, bills });
  } catch (error) {
    console.error('Error fetching doctor bills:', error);
    res.status(500).json({ success: false, message: 'Failed to fetch bills' });
  }
};

/**
 * Get a single bill by ID
 */
exports.getBillById = async (req, res) => {
  try {
    const { billId } = req.params;
    const userId = req.user.id;

    const bill = await Bill.findById(billId)
      .populate('patientId', 'name email')
      .populate('doctorId', 'name specialization')
      .populate('appointmentId', 'date timeSlot status');

    if (!bill) {
      return res.status(404).json({ success: false, message: 'Bill not found' });
    }

    // Check authorization
    if (
      bill.patientId._id.toString() !== userId &&
      bill.doctorId._id.toString() !== userId
    ) {
      return res.status(403).json({ success: false, message: 'Unauthorized access' });
    }

    res.json({ success: true, bill });
  } catch (error) {
    console.error('Error fetching bill:', error);
    res.status(500).json({ success: false, message: 'Failed to fetch bill' });
  }
};

/**
 * Update bill (doctor only - e.g., cancel unpaid bill)
 */
exports.updateBill = async (req, res) => {
  try {
    const { billId } = req.params;
    const { status, notes } = req.body;
    const doctorId = req.user.id;

    const bill = await Bill.findById(billId);
    if (!bill) {
      return res.status(404).json({ success: false, message: 'Bill not found' });
    }

    if (bill.doctorId.toString() !== doctorId) {
      return res.status(403).json({ success: false, message: 'Unauthorized access' });
    }

    if (bill.status === 'paid') {
      return res.status(400).json({ 
        success: false, 
        message: 'Cannot modify a paid bill' 
      });
    }

    // Only allow cancelling unpaid bills
    if (status && status !== 'cancelled') {
      return res.status(400).json({ 
        success: false, 
        message: 'Can only cancel unpaid bills' 
      });
    }

    if (status) bill.status = status;
    if (notes !== undefined) bill.notes = notes;

    await bill.save();

    res.json({ 
      success: true, 
      message: 'Bill updated successfully',
      bill 
    });
  } catch (error) {
    console.error('Error updating bill:', error);
    res.status(500).json({ success: false, message: 'Failed to update bill' });
  }
};

/**
 * Get bill statistics for doctor dashboard
 */
exports.getDoctorBillStats = async (req, res) => {
  try {
    const doctorId = req.user.id;

    const stats = await Bill.aggregate([
      { $match: { doctorId: require('mongoose').Types.ObjectId(doctorId) } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$totalAmount' },
        },
      },
    ]);

    const formattedStats = {
      total: 0,
      unpaid: { count: 0, amount: 0 },
      paid: { count: 0, amount: 0 },
      cancelled: { count: 0, amount: 0 },
    };

    stats.forEach(stat => {
      formattedStats.total += stat.count;
      formattedStats[stat._id] = {
        count: stat.count,
        amount: stat.totalAmount,
      };
    });

    res.json({ success: true, stats: formattedStats });
  } catch (error) {
    console.error('Error fetching bill stats:', error);
    res.status(500).json({ success: false, message: 'Failed to fetch statistics' });
  }
};
